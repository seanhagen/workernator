// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package workernator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Start creates a job and attempts to run it. It returns as soon as
	// the job has begun running.
	//
	// Jobs each have their own set of required arguments; sending the
	// wrong or invalid arguments will cause the job to fail to start.
	Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*Job, error)
	// Stop will force-stop the job matching the ID provided. This
	// method will attempt to stop the job as quickly as possible, and
	// does not take into account what the job may be doing at any
	// particular moment. This method will wait until the job has been
	// sucesfully stopped before returning.
	//
	// Will return an error if the ID provided doesn't map to any known
	// jobs.
	Stop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*Job, error)
	// Status returns the current status of any job known to the
	// service.
	//
	// Will return an error if the ID provided doesn't map to any known
	// jobs.
	Status(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*Job, error)
	// Output returns a stream of log lines from the job. It always
	// returns the full log from the beginning of job execution.
	//
	// Will return an error if the ID provided doesn't map to any known
	// jobs.
	Output(ctx context.Context, in *OutputJobRequest, opts ...grpc.CallOption) (Service_OutputClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Start(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/seanhagen.workernator.Service/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Stop(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/seanhagen.workernator.Service/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Status(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/seanhagen.workernator.Service/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Output(ctx context.Context, in *OutputJobRequest, opts ...grpc.CallOption) (Service_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/seanhagen.workernator.Service/Output", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_OutputClient interface {
	Recv() (*OutputJobResponse, error)
	grpc.ClientStream
}

type serviceOutputClient struct {
	grpc.ClientStream
}

func (x *serviceOutputClient) Recv() (*OutputJobResponse, error) {
	m := new(OutputJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// Start creates a job and attempts to run it. It returns as soon as
	// the job has begun running.
	//
	// Jobs each have their own set of required arguments; sending the
	// wrong or invalid arguments will cause the job to fail to start.
	Start(context.Context, *JobStartRequest) (*Job, error)
	// Stop will force-stop the job matching the ID provided. This
	// method will attempt to stop the job as quickly as possible, and
	// does not take into account what the job may be doing at any
	// particular moment. This method will wait until the job has been
	// sucesfully stopped before returning.
	//
	// Will return an error if the ID provided doesn't map to any known
	// jobs.
	Stop(context.Context, *JobStopRequest) (*Job, error)
	// Status returns the current status of any job known to the
	// service.
	//
	// Will return an error if the ID provided doesn't map to any known
	// jobs.
	Status(context.Context, *JobStatusRequest) (*Job, error)
	// Output returns a stream of log lines from the job. It always
	// returns the full log from the beginning of job execution.
	//
	// Will return an error if the ID provided doesn't map to any known
	// jobs.
	Output(*OutputJobRequest, Service_OutputServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Start(context.Context, *JobStartRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedServiceServer) Stop(context.Context, *JobStopRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedServiceServer) Status(context.Context, *JobStatusRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedServiceServer) Output(*OutputJobRequest, Service_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seanhagen.workernator.Service/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Start(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seanhagen.workernator.Service/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Stop(ctx, req.(*JobStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seanhagen.workernator.Service/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Status(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OutputJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).Output(m, &serviceOutputServer{stream})
}

type Service_OutputServer interface {
	Send(*OutputJobResponse) error
	grpc.ServerStream
}

type serviceOutputServer struct {
	grpc.ServerStream
}

func (x *serviceOutputServer) Send(m *OutputJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seanhagen.workernator.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Service_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Service_Stop_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Service_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Output",
			Handler:       _Service_Output_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "workernator.proto",
}
