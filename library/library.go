package library

import "fmt"

func NewErrInvalidID(id string, err error) ErrInvalidID {
// NewErrInvalidID builds a custom ErrInvalidID and returns it
	return ErrInvalidID{id, err}
}

func NewErrNoJobForID(id string) ErrNoJobForID {
// NewErrNoJobForID builds a custom ErrNoJobForID and returns it
	return ErrNoJobForID{id}
}

// ErrInvalidID is a custom error for when JobStatus(), StopJob(), or
// GetJobOutput() is called with an ID that is not a valid xid
type ErrInvalidID struct {
	id  string
	err error
}

func (inv ErrInvalidID) Error() string {
	return fmt.Sprintf("'%v' is not a valid job id: %v", inv.id, inv.err)
}

// ErrNoJobForID is a custom error for when JobStatus(), StopJob(), or
// GetJobOutput() is called with an ID that the manager doesn't know
// about
type ErrNoJobForID struct {
	id string
}

func (no ErrNoJobForID) Error() string {
	return fmt.Sprintf("no job found for id '%v'", no.id)
}

// Job is an interface that can be used to interact with a job
type Job interface {
	JobInfo
	// Wait blocks until the job is complete, at which point it returns
	// the error ( if any ) generated by running the command
	Wait() error
	// Stop forceably stops the job ( by killing it ), returning the
	// error ( if any ) returned from the system when trying to kill the
	// job
	Stop() error
}

// JobInfo is an interface describing the state of a job
type JobInfo interface {
	// ID returns the unique string identifier for the job
	ID() string
	// Status returns the current status of the job, can be one of:
	//  - Unknown
	//  - Running
	//  - Failed
	//  - Finished
	//  - Stopped
	Status() string
	// Command returns the command that this job is running
	Command() string
	// Arguments returns the arguments pass to the job on the command
	// line
	Arguments() []string
	// Error returns nil until the job is finished; at which point it
	// will return the error ( if any ) generated by running the command
	Error() error
}
